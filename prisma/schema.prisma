// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up yourcont queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant Club model
model Club {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  logo      String?
  colors    Json? // Brand colors for customization
  settings  Json? // Club-specific settings
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  users User[]

  children           Child[]
  feeStructures      FeeStructure[]
  invoices           Invoice[]
  payments           Payment[]
  classes            Class[]
  schedules          Schedule[]
  enrollments        Enrollment[]
  attendance         Attendance[]
  documents          Document[]
  consentRecords     ConsentRecord[]
  dataProcessingLogs DataProcessingLog[]
  auditLogs          AuditLog[]

  // New relationships
  feeAdjustments   FeeAdjustment[]
  oneTimeItems     OneTimeItem[]
  expenses         Expense[]
  additionalIncome AdditionalIncome[]
  events           Event[]
  creditAccounts   CreditAccount[]

  @@map("clubs")
}

// User model for parents/guardians and admin users
model User {
  id        String   @id @default(cuid())
  clubId    String
  email     String
  phone     String?
  firstName String
  lastName  String
  password  String
  role      UserRole @default(PARENT)
  isActive  Boolean  @default(true)

  // Notification preferences
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  club               Club                @relation(fields: [clubId], references: [id], onDelete: Cascade)
  children           Child[]
  invoices           Invoice[]
  parentPayments     Payment[]           @relation("ParentPayments")
  userPayments       Payment[]           @relation("UserPayments") // Legacy support
  documents          UserDocument[]
  consentRecords     ConsentRecord[]
  dataProcessingLogs DataProcessingLog[]
  auditLogs          AuditLog[]

  // Scheduling relationships
  coachSchedules   Schedule[]   @relation("CoachSchedules")
  coachClasses     Class[]      @relation("CoachClasses")
  attendanceMarked Attendance[] @relation("AttendanceMarker")

  // Credit system
  creditAccount CreditAccount?

  @@unique([clubId, email])
  @@map("users")
}

// Child/Student model
model Child {
  id          String      @id @default(cuid())
  clubId      String
  firstName   String
  lastName    String
  dateOfBirth DateTime?
  gender      Gender? // Child's gender
  level       String // RR, R, Pre-Level 1, Level 1-5
  status      ChildStatus @default(ACTIVE)
  monthlyFee  Decimal? // Override fee if different from level default
  notes       String? // Special circumstances, discounts, etc.
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  club               Club                @relation(fields: [clubId], references: [id], onDelete: Cascade)
  parents            User[]
  invoiceItems       InvoiceItem[]
  activities         ChildActivity[]
  consentRecords     ConsentRecord[]
  dataProcessingLogs DataProcessingLog[]

  // Scheduling relationships
  enrollments Enrollment[]
  attendance  Attendance[]

  // Fee management
  feeAdjustments FeeAdjustment[]

  @@map("children")
}

// Fee structure per club
model FeeStructure {
  id          String   @id @default(cuid())
  clubId      String
  level       String // RR, R, Pre-Level 1, Level 1-5
  monthlyFee  Decimal
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@unique([clubId, level])
  @@map("fee_structures")
}

// Invoice model
model Invoice {
  id            String        @id @default(cuid())
  clubId        String
  userId        String // Parent/Guardian
  invoiceNumber String // Auto-generated
  month         Int // 1-12
  year          Int
  subtotal      Decimal
  discount      Decimal       @default(0)
  total         Decimal
  status        InvoiceStatus @default(PENDING)
  dueDate       DateTime
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  club     Club          @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items    InvoiceItem[]
  payments Payment[]

  @@unique([clubId, invoiceNumber])
  @@map("invoices")
}

// Invoice items (line items)
model InvoiceItem {
  id          String          @id @default(cuid())
  invoiceId   String
  childId     String? // Null for family-level items
  description String
  amount      Decimal
  quantity    Int             @default(1)
  type        InvoiceItemType

  // Relationships
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  child   Child?  @relation(fields: [childId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

// Payment tracking
model Payment {
  id                    String        @id @default(cuid())
  clubId                String
  parentId              String // Parent/Guardian (updated field name)
  invoiceId             String? // Can be null for prepayments
  amount                Decimal
  status                PaymentStatus @default(PENDING)
  method                PaymentMethod
  reference             String? // Bank reference, etc.
  notes                 String?
  externalTransactionId String? // Gateway transaction ID
  metadata              Json? // Gateway-specific data
  paidAt                DateTime? // When payment was completed
  processedAt           DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Legacy support
  userId               String? // Keep for backward compatibility
  payfastTransactionId String? // Legacy field

  // Activity tracking
  activities PaymentActivity[]

  // Relationships
  club    Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  parent  User     @relation("ParentPayments", fields: [parentId], references: [id], onDelete: Cascade)
  user    User?    @relation("UserPayments", fields: [userId], references: [id], onDelete: SetNull)
  invoice Invoice? @relation(fields: [invoiceId], references: [id], onDelete: SetNull)

  @@map("payments")
}

// Payment activity log
model PaymentActivity {
  id          String   @id @default(cuid())
  paymentId   String
  action      String // e.g., "created", "pending", "completed", "failed"
  description String?
  metadata    Json?
  createdAt   DateTime @default(now())

  // Relationships
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("payment_activities")
}

// Class management - individual class instances and templates
model Class {
  id          String      @id @default(cuid())
  clubId      String
  scheduleId  String? // Optional link to recurring schedule
  name        String
  level       String // RR, R, Pre-Level 1, Level 1-5
  coachId     String? // Optional coach assignment
  date        DateTime? // Specific date for class instances
  startTime   DateTime? // Specific start time for instances
  endTime     DateTime? // Specific end time for instances
  maxCapacity Int         @default(12)
  location    String? // Room/area within the gym
  notes       String? // Class-specific notes
  status      ClassStatus @default(SCHEDULED)
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  club       Club         @relation(fields: [clubId], references: [id], onDelete: Cascade)
  schedule   Schedule?    @relation("ClassSchedule", fields: [scheduleId], references: [id])
  coach      User?        @relation("CoachClasses", fields: [coachId], references: [id])
  attendance Attendance[] // Individual class attendance

  @@map("classes")
}

// Schedule management - recurring class schedules
model Schedule {
  id            String    @id @default(cuid())
  clubId        String
  classId       String? // Optional link to class template
  name          String // e.g. "Level 1 Monday Evening"
  level         String? // RR, R, Pre-Level 1, Level 1-5
  coachId       String? // Optional coach assignment
  dayOfWeek     DayOfWeek // Use enum instead of Int
  startTime     String // Format: "HH:MM" (e.g. "17:00")
  endTime       String // Format: "HH:MM" (e.g. "18:00")
  maxCapacity   Int       @default(12)
  venue         String? // Venue/location
  location      String? // Room/area within the gym
  description   String?
  isActive      Boolean   @default(true)
  isExtraLesson Boolean   @default(false) // Mark as extra lesson/make-up class
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  club        Club         @relation(fields: [clubId], references: [id], onDelete: Cascade)
  classes     Class[]      @relation("ClassSchedule") // Classes linked to this schedule
  coach       User?        @relation("CoachSchedules", fields: [coachId], references: [id])
  enrollments Enrollment[] // New enrollment system

  @@unique([clubId, name])
  @@map("schedules")
}

// Document management (policies, forms, etc.)
model Document {
  id                String           @id @default(cuid())
  clubId            String
  title             String
  description       String?
  filePath          String
  fileName          String
  fileSize          Int
  fileType          String
  mimeType          String
  category          DocumentCategory @default(GENERAL)
  requiresSignature Boolean          @default(false)
  isPublic          Boolean          @default(false) // Public to all parents
  isMandatory       Boolean          @default(false) // Required for all parents
  version           String           @default("1.0")
  expiresAt         DateTime? // Optional expiry date
  isActive          Boolean          @default(true)
  createdBy         String // User who uploaded
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // POPI Act compliance fields
  dataProcessingPurpose String? // Why this document processes personal data
  retentionPeriod       Int? // Data retention period in months

  // Relationships
  club           Club            @relation(fields: [clubId], references: [id], onDelete: Cascade)
  userDocuments  UserDocument[]
  consentRecords ConsentRecord[]

  @@map("documents")
}

// User document signatures/acknowledgments with enhanced tracking
model UserDocument {
  id             String         @id @default(cuid())
  userId         String
  documentId     String
  viewedAt       DateTime? // When user first viewed
  signedAt       DateTime? // When user signed
  signature      String? // Digital signature data (base64 encoded)
  signatureType  SignatureType? // Type of signature used
  ipAddress      String? // IP where signature was made
  userAgent      String? // Browser info for audit
  isAcknowledged Boolean        @default(false)
  reminderSentAt DateTime? // Last reminder sent
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relationships
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([userId, documentId])
  @@map("user_documents")
}

// Consent tracking for POPI Act compliance
model ConsentRecord {
  id          String      @id @default(cuid())
  clubId      String
  userId      String // Parent giving consent
  childId     String? // Child the consent is for (if applicable)
  documentId  String? // Related document (if any)
  consentType ConsentType
  purpose     String // What the consent is for
  isGranted   Boolean     @default(false)
  grantedAt   DateTime?
  revokedAt   DateTime?
  expiresAt   DateTime? // Optional expiry
  ipAddress   String? // Where consent was given
  userAgent   String? // Browser info
  version     String      @default("1.0")
  legalBasis  LegalBasis  @default(CONSENT)

  // Marketing consent specifics
  emailMarketing Boolean? // Consent for email marketing
  smsMarketing   Boolean? // Consent for SMS marketing
  photoVideo     Boolean? // Consent for photos/videos
  socialMedia    Boolean? // Consent for social media use

  // POPI Act Annual Consent specifics
  participationConsent     Boolean? // Consent for child to participate
  dataProcessingConsent    Boolean? // Consent for data processing
  mediaConsent             Boolean? // Consent for media use
  emergencyMedicalConsent  Boolean? // Consent for emergency medical treatment

  // Medical Information
  doctorName       String? // Child's doctor name
  doctorPhone      String? // Child's doctor phone
  medicalAidName   String? // Medical aid provider
  medicalAidNumber String? // Medical aid number
  allergies        String? // Allergies or conditions
  medications      String? // Current medications

  // Signature data
  signatureData    String? // Base64 encoded signature
  signedByName     String? // Name of person who signed

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  club     Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  child    Child?    @relation(fields: [childId], references: [id], onDelete: Cascade)
  document Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)

  @@unique([userId, consentType])
  @@map("consent_records")
}

// Data processing audit log for POPI compliance
model DataProcessingLog {
  id         String               @id @default(cuid())
  clubId     String
  userId     String? // User who performed action
  childId    String? // Child whose data was processed
  action     DataProcessingAction
  purpose    String // Why the data was processed
  dataTypes  String[] // Types of data processed
  legalBasis LegalBasis
  source     String? // Where the action originated
  ipAddress  String?
  userAgent  String?
  metadata   Json? // Additional context
  createdAt  DateTime             @default(now())

  // Relationships
  club  Club   @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user  User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  child Child? @relation(fields: [childId], references: [id], onDelete: SetNull)

  @@map("data_processing_logs")
}

// Child activity history (level changes, fee changes, etc.)
model ChildActivity {
  id          String       @id @default(cuid())
  childId     String
  type        ActivityType
  description String
  oldValue    String?
  newValue    String?
  createdBy   String // User ID
  createdAt   DateTime     @default(now())

  // Relationships
  child Child @relation(fields: [childId], references: [id], onDelete: Cascade)

  @@map("child_activities")
}

// Audit log for admin actions
model AuditLog {
  id        String   @id @default(cuid())
  clubId    String
  userId    String
  action    String
  entity    String // Table name
  entityId  String // Record ID
  oldValues Json?
  newValues Json?
  createdAt DateTime @default(now())

  // Relationships
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

// Enums
enum UserRole {
  PARENT
  ADMIN
  FINANCE_ADMIN
  COACH
  SUPER_ADMIN
}

enum ChildStatus {
  ACTIVE
  INACTIVE
  WITHDRAWN
}

enum Gender {
  MALE
  FEMALE
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum InvoiceItemType {
  MONTHLY_FEE
  ONCE_OFF
  COMPETITION
  EQUIPMENT
  CLOTHING
  REGISTRATION
  HOLIDAY_PROGRAM
  DISCOUNT
  ADJUSTMENT
}

enum PaymentMethod {
  EFT
  CASH
  CARD
  ONLINE
  PAYFAST
  YOCO
  OZOW
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum ActivityType {
  LEVEL_CHANGE
  FEE_CHANGE
  STATUS_CHANGE
  ENROLLMENT
  WITHDRAWAL
  PAYMENT
  NOTE_ADDED
}

enum ClassStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// Document and POPI Act enums
enum DocumentCategory {
  GENERAL
  POLICY
  TERMS_CONDITIONS
  PRIVACY_POLICY
  CONSENT_FORM
  MEDICAL_FORM
  PHOTO_VIDEO_CONSENT
  EMERGENCY_CONTACT
  WAIVER
  REGISTRATION
  POPI_NOTICE
  DATA_PROCESSING_AGREEMENT
}

enum SignatureType {
  ELECTRONIC
  DIGITAL
  TYPED
  DRAWN
}

enum ConsentType {
  DATA_PROCESSING
  MARKETING_EMAIL
  MARKETING_SMS
  PHOTO_VIDEO
  SOCIAL_MEDIA
  MEDICAL_TREATMENT
  EMERGENCY_CONTACT
  GENERAL_TERMS
}

enum LegalBasis {
  CONSENT
  CONTRACT
  LEGAL_OBLIGATION
  VITAL_INTERESTS
  PUBLIC_TASK
  LEGITIMATE_INTERESTS
}

enum DataProcessingAction {
  CREATE
  READ
  UPDATE
  DELETE
  EXPORT
  SHARE
  ANONYMIZE
  ARCHIVE
  RESTORE
}

// Enrollment model - links children to recurring schedules
model Enrollment {
  id         String    @id @default(cuid())
  clubId     String
  childId    String
  scheduleId String
  startDate  DateTime  @default(now())
  endDate    DateTime? // Optional end date for temporary enrollments
  isActive   Boolean   @default(true)
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relationships
  club     Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  child    Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  schedule Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@unique([childId, scheduleId])
  @@map("enrollments")
}

// Attendance model - tracks attendance for individual classes
model Attendance {
  id       String           @id @default(cuid())
  clubId   String
  classId  String
  childId  String
  status   AttendanceStatus @default(PRESENT)
  notes    String? // e.g. "Arrived 10 min late", "Left early due to injury"
  markedAt DateTime         @default(now())
  markedBy String? // User ID who marked attendance

  // Relationships
  club         Club  @relation(fields: [clubId], references: [id], onDelete: Cascade)
  class        Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  child        Child @relation(fields: [childId], references: [id], onDelete: Cascade)
  markedByUser User? @relation("AttendanceMarker", fields: [markedBy], references: [id])

  @@unique([classId, childId])
  @@map("attendance")
}

// Fee Adjustment model - for individual fee overrides
model FeeAdjustment {
  id             String            @id @default(cuid())
  clubId         String
  childId        String // Child receiving the adjustment
  adjustmentType FeeAdjustmentType
  amount         Decimal // New fee amount
  reason         String // Why the adjustment was made
  effectiveFrom  DateTime // When adjustment starts
  effectiveTo    DateTime? // When adjustment ends (null for permanent)
  isRecurring    Boolean           @default(true) // True for ongoing, false for one-time
  createdBy      String // Admin who made the adjustment
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relationships
  club  Club  @relation(fields: [clubId], references: [id], onDelete: Cascade)
  child Child @relation(fields: [childId], references: [id], onDelete: Cascade)

  @@map("fee_adjustments")
}

// One-Time Item model - for adding extra charges to invoices
model OneTimeItem {
  id           String              @id @default(cuid())
  clubId       String
  userId       String // Parent being charged
  childId      String? // Optional child association
  description  String // e.g., "Competition Entry Fee"
  amount       Decimal
  category     OneTimeItemCategory
  billingMonth Int // 1-12
  billingYear  Int
  isProcessed  Boolean             @default(false) // Has it been added to an invoice?
  processedAt  DateTime?
  notes        String?
  createdBy    String // Admin who added it
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  // Relationships
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@map("one_time_items")
}

// Expense model - for club expense tracking
model Expense {
  id          String          @id @default(cuid())
  clubId      String
  amount      Decimal
  date        DateTime
  category    ExpenseCategory
  description String
  receipt     String? // URL/path to receipt file
  notes       String?
  createdBy   String // Admin who added it
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relationships
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

// Additional Income model - for non-member income tracking
model AdditionalIncome {
  id          String                 @id @default(cuid())
  clubId      String
  amount      Decimal
  date        DateTime
  source      AdditionalIncomeSource
  description String
  notes       String?
  createdBy   String // Admin who added it
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  // Relationships
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@map("additional_income")
}

// Event model - for competitions, showcases, etc.
model Event {
  id                   String    @id @default(cuid())
  clubId               String
  title                String
  description          String?
  eventType            EventType
  date                 DateTime
  endDate              DateTime? // For multi-day events
  location             String?
  registrationDeadline DateTime?
  maxParticipants      Int?
  cost                 Decimal? // Participation cost
  isPublic             Boolean   @default(true) // Visible to all members
  targetLevels         String[] // Array of level names
  notes                String?
  createdBy            String // Admin who created it
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relationships
  club          Club                @relation(fields: [clubId], references: [id], onDelete: Cascade)
  registrations EventRegistration[]

  @@map("events")
}

// Event Registration model - tracks who's registered for events
model EventRegistration {
  id           String                  @id @default(cuid())
  eventId      String
  childId      String
  registeredAt DateTime                @default(now())
  status       EventRegistrationStatus @default(PENDING)
  notes        String?

  // Relationships
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, childId])
  @@map("event_registrations")
}

// New enums for fee management and additional features
enum FeeAdjustmentType {
  PERMANENT_CHANGE
  TEMPORARY_CHANGE
  DISCOUNT
  SCHOLARSHIP
  SCHEDULE_CHANGE
}

enum OneTimeItemCategory {
  COMPETITION
  EQUIPMENT
  CLOTHING
  REGISTRATION
  LATE_FEE
  OTHER
}

enum ExpenseCategory {
  SUPPLIES
  EQUIPMENT
  RENT
  UTILITIES
  STAFF
  MARKETING
  INSURANCE
  MAINTENANCE
  OTHER
}

enum AdditionalIncomeSource {
  BANK_INTEREST
  FUNDRAISER
  DONATION
  GRANT
  SPONSORSHIP
  OTHER
}

enum EventType {
  GYM_GAMES
  TRIALS
  PROVINCIAL_COMPETITION
  NATIONAL_COMPETITION
  SHOWCASE
  WORKSHOP
  SOCIAL_EVENT
  OTHER
}

enum EventRegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  WAITLIST
}

// Credit Account for tracking user credits/balances
model CreditAccount {
  id            String              @id @default(cuid())
  clubId        String
  userId        String              @unique
  balance       Decimal             @default(0) @db.Decimal(10, 2)
  currency      String              @default("ZAR")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  club          Club                @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  CreditTransaction[]

  @@map("credit_accounts")
}

// Credit Transaction for tracking all credit movements
model CreditTransaction {
  id              String                  @id @default(cuid())
  clubId          String
  creditAccountId String
  amount          Decimal                 @db.Decimal(10, 2)
  type            CreditTransactionType
  description     String
  reference       String? // Reference to related entity (invoice ID, payment ID, etc.)
  balanceBefore   Decimal                 @db.Decimal(10, 2)
  balanceAfter    Decimal                 @db.Decimal(10, 2)
  createdBy       String?
  createdAt       DateTime                @default(now())

  creditAccount   CreditAccount           @relation(fields: [creditAccountId], references: [id], onDelete: Cascade)

  @@map("credit_transactions")
}

enum CreditTransactionType {
  CREDIT_ADDED      // Manual credit addition
  CREDIT_USED       // Credit applied to invoice
  CREDIT_REFUNDED   // Credit refunded/removed
  PAYMENT_EXCESS    // Excess payment converted to credit
  ADJUSTMENT        // Manual adjustment
}
